{"version":3,"sources":["../../../../lib/components/buttonGroup/index.tsx"],"names":["ButtonGroup","color","groups","rest","map","row","value","label"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;AAcA,IAAMA,WAAkC,GAAG,SAArCA,WAAqC,OAAgC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,MAAXC,IAAW;;AACzE,sBACE,oBAAC,cAAD;AAAoB,IAAA,KAAK,EAAEF;AAA3B,kBACE,oBAAC,WAAD,CAAO,KAAP,EAAiBE,IAAjB,EACGD,MAAM,CAACE,GAAP,CAAW,UAACC,GAAD;AAAA,wBACV,oBAAC,WAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEA,GAAG,CAACC;AAAzB,OAAiCD,GAAG,CAACE,KAArC,CADU;AAAA,GAAX,CADH,CADF,CADF;AASD,CAVD;;eAYeP,W","sourcesContent":["import { FC } from 'react';\nimport { Radio, RadioProps } from 'antd';\nimport ButtonGroupWrapper from './style';\n\nexport interface Group {\n  label: string;\n  value: string | number;\n}\n\ntype Groups = Group[];\n\nexport interface IButtonGroupProps extends RadioProps {\n  color?: 'secondary' | 'primary' | undefined;\n  groups: Groups;\n}\n\nconst ButtonGroup: FC<IButtonGroupProps> = ({ color, groups, ...rest }) => {\n  return (\n    <ButtonGroupWrapper color={color}>\n      <Radio.Group {...rest}>\n        {groups.map((row) => (\n          <Radio.Button value={row.value}>{row.label}</Radio.Button>\n        ))}\n      </Radio.Group>\n    </ButtonGroupWrapper>\n  );\n};\n\nexport default ButtonGroup;\n"],"file":"index.js"}