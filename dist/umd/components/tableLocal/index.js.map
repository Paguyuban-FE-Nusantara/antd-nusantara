{"version":3,"sources":["../../../../lib/components/tableLocal/index.tsx"],"names":["orderingNumber","withNumber","Option","startPage","TableLocal","props","columns","rest","React","currentTableData","firstPageIndex","currentPage","lastPageIndex","dataSource","numberColumn","title","key","width","render","index","onSizeChange","size","setPageSize","setCurrentPage","startItem","endItem","total","span","page"],"mappings":"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","sourcesContent":["import { Col, Row, Select, TableProps } from 'antd';\nimport * as React from 'react';\nimport TableWrapper from './style';\nimport Table from \"../table\";\nimport Pagination from \"../pagination\";\n\nexport interface ITableLocalProps<T extends object> extends TableProps<T> {\n  orderingNumber?: number;\n  withNumber?: boolean;\n}\n\nconst { Option } = Select;\n\nconst startPage = 1;\n\nconst TableLocal = <T extends object = object>(props: ITableLocalProps<T>) => {\n  const { dataSource, columns = [], orderingNumber, withNumber = false, ...rest } = props;\n\n  const [currentPage, setCurrentPage] = React.useState(startPage);\n  const [pageSize, setPageSize] = React.useState(5);\n\n  const currentTableData = React.useMemo(() => {\n    const firstPageIndex = (currentPage - 1) * pageSize;\n    const lastPageIndex = firstPageIndex + pageSize;\n    return dataSource?.slice(firstPageIndex, lastPageIndex);\n  }, [dataSource, pageSize, currentPage]);\n\n  const numberColumn = [\n    {\n      title: 'No',\n      key: 'index',\n      width: 30,\n      render: (value: any, item: any, index: number) => (currentPage - 1) * pageSize + (index + 1),\n    },\n  ];\n\n  const onSizeChange = (size: React.SetStateAction<number>) => {\n    setPageSize(size);\n    setCurrentPage(1);\n  };\n\n  const startItem = (currentPage - 1) * pageSize + 1;\n  const endItem = currentPage * pageSize;\n  const total = dataSource?.length;\n\n  return (\n    <TableWrapper>\n      <Row>\n        <Col span={24}>\n          <Table\n            rowClassName={(record: any, index: number) =>\n              index % 2 === 0 ? 'table-row-light' : 'table-row-dark'\n            }\n            dataSource={currentTableData}\n            pagination={false}\n            columns={withNumber ? [...numberColumn, ...columns] : columns}\n            {...rest}\n          />\n        </Col>\n      </Row>\n      <Row justify=\"end\" align=\"middle\" className=\"action-bottom\">\n        <Col xl={{ span: 6 }} lg={{ span: 8 }} md={{ span: 12 }}>\n          <Row justify=\"end\" gutter={24}>\n            <Col>Baris per halaman</Col>\n            <Col>\n              <Select className=\"select-size\" defaultValue={pageSize} onChange={onSizeChange}>\n                <Option value={5}>5</Option>\n                <Option value={10}>10</Option>\n                <Option value={20}>20</Option>\n              </Select>\n            </Col>\n          </Row>\n        </Col>\n        <Col xl={{ span: 3 }} lg={{ span: 4 }} md={{ span: 12 }} className=\"text-right\">\n          {startItem} - {endItem} dari {total}\n        </Col>\n        <Col xl={{ span: 4 }} lg={{ span: 7 }} md={{ span: 12 }} className=\"text-right\">\n          <Pagination\n            className=\"pagination-bar\"\n            currentPage={currentPage}\n            totalCount={total || 0}\n            pageSize={pageSize}\n            onPageChange={(page: React.SetStateAction<number>) => setCurrentPage(page)}\n          />\n        </Col>\n      </Row>\n    </TableWrapper>\n  );\n};\n\nexport default TableLocal;\n"],"file":"index.js"}